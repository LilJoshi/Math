# Some nice generators
# Mostly generating integer sequences
# Inspired by 61A

from operator import add

# Some nice pure functions

identity = lambda x: x
increment = lambda x: x+1
decrement = lambda x: x-1
double = lambda x: x+x
square = lambda x: x*x
one = lambda x: 1

# Some nice pure function functions
times = lambda n: lambda x: n*x

############################################
# Functions that take in or product functions

# Notes:
# 'gen' means generator
# 'genf' means 'generator function'
# often, genf() ~ gen

# In principle, what the following do is
# take in a function t: gen (--> gen)
# and returns a function t': genf (--> genf)
# (kind of)
# inputs/outputs vary

function = lambda t: lambda genf, *args: lambda: t(genf(), *args)
function_w = lambda t: lambda n, *args: lambda: t(n, *args)

# Functions t: gen --> gen
# (sort of)

def repeat(n, f):
	yield n
	yield from repeat(f(n), f)

intgen = lambda n: repeat(n, identity)

def high(gen, f, n):
	""" Let the elements generated by gen be a, b, c...
	Then high(gen, f, n) generates f(a, n), f(b, f(a, n)), 
	f(c, f(b, f(a, n)))... """
	x = f(next(gen), n)
	yield x
	yield from high(gen, f, x)

accumulate = lambda gen, n: high(gen, add, n)
apply = lambda gen, f: high(gen, lambda x, y: f(x), 0)

def gentest(gen):
	""" for testing purposes """
	for i in range(10):
		print(next(gen))

# Functions t': genf --> genf
# (sort of)

genftest = function(gentest)
accumulatef = function(accumulate)
applyf = function(apply)
intgenf = function_w(intgen)
repeatf = function_w(repeat)

partialsums = lambda genf: accumulatef(genf, 0)

# Generator functions

multiples = lambda n, m: accumulatef(intgenf(n), m-n)

naturals = multiples(1, 1)
evens = multiples(2, 2) #or, applyf(naturals, double)
odds = multiples(2, 1)

triangles = accumulatef(naturals, 0)
squares = accumulatef(odds, 0) #or, applyf(naturals, square)
polygons = lambda n: accumulatef(multiples(n-2, 1), 0)

powers = lambda n: repeatf(1, times(n))
alternating = powers(-1)


#fib = accumulate(fib, 1)

#def fib(a = 0, b = 1):
#	yield a
#	yield from fib(b, a+b)

def fib():
	yield 0
	yield 1
	yield from accumulate(fib(), 1)

# For testing purposes
test = lambda genf: genftest(genf)()
def alltests():
	genf_list = [naturals, evens, odds, triangles, squares, fib]
	for genf in genf_list:
		test(genf)

alltests()


